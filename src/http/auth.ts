/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Migos | API Specs
 * API documentation for Migos
 * OpenAPI spec version: 0.0.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'

import { axiosInstance } from '../services/axios-instance'
import type {
  GetAuthenticateGoogle200,
  GetAuthenticateGoogle400,
  GetAuthenticateGoogle500,
  GetAuthenticateGoogleParams,
  GetUsersGoogle201,
  GetUsersGoogle400,
  GetUsersGoogle500,
  GetUsersGoogleParams,
  PostAuthenticatePassword200,
  PostAuthenticatePassword401,
  PostAuthenticatePassword500,
  PostAuthenticatePasswordBody,
  PostUsers201,
  PostUsers400,
  PostUsers500,
  PostUsersBody,
  PostUsersPreRegister201,
  PostUsersPreRegister400,
  PostUsersPreRegister500,
  PostUsersPreRegisterBody,
} from './endpoints.schemas'

/**
 * Register a new user with password
 */
export const postUsers = (
  postUsersBody: PostUsersBody,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostUsers201>({
    url: `/users`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postUsersBody,
    signal,
  })
}

export const getPostUsersMutationOptions = <
  TError = PostUsers400 | PostUsers500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: PostUsersBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: PostUsersBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: PostUsersBody }
  > = (props) => {
    const { data } = props ?? {}

    return postUsers(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsers>>
>
export type PostUsersMutationBody = PostUsersBody
export type PostUsersMutationError = PostUsers400 | PostUsers500

export const usePostUsers = <
  TError = PostUsers400 | PostUsers500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: PostUsersBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: PostUsersBody },
  TContext
> => {
  const mutationOptions = getPostUsersMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Register account with Google
 */
export const getUsersGoogle = (
  params: GetUsersGoogleParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetUsersGoogle201>({
    url: `/users/google`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetUsersGoogleQueryKey = (params: GetUsersGoogleParams) => {
  return [`/users/google`, ...(params ? [params] : [])] as const
}

export const getGetUsersGoogleQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGoogle>>, TError, TData>
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUsersGoogleQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersGoogle>>> = ({
    signal,
  }) => getUsersGoogle(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersGoogle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUsersGoogleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersGoogle>>
>
export type GetUsersGoogleQueryError = GetUsersGoogle400 | GetUsersGoogle500

export function useGetUsersGoogle<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGoogle>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersGoogle>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersGoogle<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGoogle>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersGoogle>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetUsersGoogle<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGoogle>>, TError, TData>
    >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetUsersGoogle<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersGoogle>>, TError, TData>
    >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetUsersGoogleQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetUsersGoogleSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGoogle>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetUsersGoogleQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersGoogle>>> = ({
    signal,
  }) => getUsersGoogle(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUsersGoogle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetUsersGoogleSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersGoogle>>
>
export type GetUsersGoogleSuspenseQueryError =
  | GetUsersGoogle400
  | GetUsersGoogle500

export function useGetUsersGoogleSuspense<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useGetUsersGoogleSuspense<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useGetUsersGoogleSuspense<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}

export function useGetUsersGoogleSuspense<
  TData = Awaited<ReturnType<typeof getUsersGoogle>>,
  TError = GetUsersGoogle400 | GetUsersGoogle500,
>(
  params: GetUsersGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUsersGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getGetUsersGoogleSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authenticate with password
 */
export const postAuthenticatePassword = (
  postAuthenticatePasswordBody: PostAuthenticatePasswordBody,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostAuthenticatePassword200>({
    url: `/authenticate/password`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postAuthenticatePasswordBody,
    signal,
  })
}

export const getPostAuthenticatePasswordMutationOptions = <
  TError = PostAuthenticatePassword401 | PostAuthenticatePassword500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticatePassword>>,
    TError,
    { data: PostAuthenticatePasswordBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthenticatePassword>>,
  TError,
  { data: PostAuthenticatePasswordBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthenticatePassword>>,
    { data: PostAuthenticatePasswordBody }
  > = (props) => {
    const { data } = props ?? {}

    return postAuthenticatePassword(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostAuthenticatePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthenticatePassword>>
>
export type PostAuthenticatePasswordMutationBody = PostAuthenticatePasswordBody
export type PostAuthenticatePasswordMutationError =
  | PostAuthenticatePassword401
  | PostAuthenticatePassword500

export const usePostAuthenticatePassword = <
  TError = PostAuthenticatePassword401 | PostAuthenticatePassword500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthenticatePassword>>,
    TError,
    { data: PostAuthenticatePasswordBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthenticatePassword>>,
  TError,
  { data: PostAuthenticatePasswordBody },
  TContext
> => {
  const mutationOptions = getPostAuthenticatePasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authenticate with Google
 */
export const getAuthenticateGoogle = (
  params: GetAuthenticateGoogleParams,
  signal?: AbortSignal,
) => {
  return axiosInstance<GetAuthenticateGoogle200>({
    url: `/authenticate/google`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAuthenticateGoogleQueryKey = (
  params: GetAuthenticateGoogleParams,
) => {
  return [`/authenticate/google`, ...(params ? [params] : [])] as const
}

export const getGetAuthenticateGoogleQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAuthenticateGoogleQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAuthenticateGoogle>>
  > = ({ signal }) => getAuthenticateGoogle(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAuthenticateGoogle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthenticateGoogleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthenticateGoogle>>
>
export type GetAuthenticateGoogleQueryError =
  | GetAuthenticateGoogle400
  | GetAuthenticateGoogle500

export function useGetAuthenticateGoogle<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthenticateGoogle>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthenticateGoogle<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthenticateGoogle>>,
          TError,
          TData
        >,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAuthenticateGoogle<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useGetAuthenticateGoogle<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetAuthenticateGoogleQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetAuthenticateGoogleSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAuthenticateGoogleQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAuthenticateGoogle>>
  > = ({ signal }) => getAuthenticateGoogle(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAuthenticateGoogle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAuthenticateGoogleSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthenticateGoogle>>
>
export type GetAuthenticateGoogleSuspenseQueryError =
  | GetAuthenticateGoogle400
  | GetAuthenticateGoogle500

export function useGetAuthenticateGoogleSuspense<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useGetAuthenticateGoogleSuspense<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useGetAuthenticateGoogleSuspense<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}

export function useGetAuthenticateGoogleSuspense<
  TData = Awaited<ReturnType<typeof getAuthenticateGoogle>>,
  TError = GetAuthenticateGoogle400 | GetAuthenticateGoogle500,
>(
  params: GetAuthenticateGoogleParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAuthenticateGoogle>>,
        TError,
        TData
      >
    >
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getGetAuthenticateGoogleSuspenseQueryOptions(
    params,
    options,
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Pre-register with email
 */
export const postUsersPreRegister = (
  postUsersPreRegisterBody: PostUsersPreRegisterBody,
  signal?: AbortSignal,
) => {
  return axiosInstance<PostUsersPreRegister201>({
    url: `/users/pre-register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postUsersPreRegisterBody,
    signal,
  })
}

export const getPostUsersPreRegisterMutationOptions = <
  TError = PostUsersPreRegister400 | PostUsersPreRegister500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersPreRegister>>,
    TError,
    { data: PostUsersPreRegisterBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersPreRegister>>,
  TError,
  { data: PostUsersPreRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersPreRegister>>,
    { data: PostUsersPreRegisterBody }
  > = (props) => {
    const { data } = props ?? {}

    return postUsersPreRegister(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostUsersPreRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersPreRegister>>
>
export type PostUsersPreRegisterMutationBody = PostUsersPreRegisterBody
export type PostUsersPreRegisterMutationError =
  | PostUsersPreRegister400
  | PostUsersPreRegister500

/**
 * @summary Pre-register with email
 */
export const usePostUsersPreRegister = <
  TError = PostUsersPreRegister400 | PostUsersPreRegister500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersPreRegister>>,
    TError,
    { data: PostUsersPreRegisterBody },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersPreRegister>>,
  TError,
  { data: PostUsersPreRegisterBody },
  TContext
> => {
  const mutationOptions = getPostUsersPreRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}
